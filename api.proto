syntax = "proto3";
import "google/protobuf/descriptor.proto";
import "onnx/onnx.proto";

// Solver
message Interpretation {
    repeated int32 variable = 1;
}


// Random
message Clause {
    repeated int32 literal = 1;
}

message Cnf {
    repeated Clause clause = 1;
}

message WhoAreYourParams {}

service Random {
    rpc RandomCnf(WhoAreYourParams) returns (Cnf) {}
}


// Service
message ServiceExtended {
    Multihash multihash = 1;
    Service service = 2;
}

message File {
    string file = 1;
}

service Solver {
    rpc StartTrain ( WhoAreYourParams) returns (WhoAreYourParams) {}
    rpc StopTrain ( WhoAreYourParams) returns (WhoAreYourParams) {}
    rpc GetTensor ( WhoAreYourParams) returns (stream onnx.ModelProto) {}
    rpc UploadSolver (ServiceExtended) returns (WhoAreYourParams) {}
    rpc StreamLogs (WhoAreYourParams) returns (stream File){}
    rpc Solve(Cnf) returns (Interpretation) {}
}


// IPSS
// IPSS
// Hash Table ( IPDL ?)
message Multihash {
    map<string, string> hash = 1;
}

// API: Defines how you can interact with the service, the ports where it listens, the communication protocols that it supports, methods and the different errors and responses that it can give.
message ProtocolMesh {
    string something = 1;
}

message Slot {
    int32 port = 1;
    google.protobuf.FileDescriptorSet aplication_protocol = 2;
    ProtocolMesh transport_protocol = 3;
}

message Api {
    repeated Slot slot = 1;
}

// Container: Specifies the container where the service runs, microarchitecture, entry point and filesystem (DAG?), and environment variables.
message Architecture {
    string something = 1;
}

message Container {
    Architecture architecture = 1;
    Multihash filesystem = 2;
    repeated string enviroment_variables = 3;
    string entrypoint = 4;
}

// Tensor: Defines “intelligence” that the service can provide, I think it would be a description of a polynomial (without coefficients and describing the variables).
message Tensor {
    message Variable {
        repeated string tag = 1;
        google.protobuf.FileDescriptorSet field = 2;
    }
    repeated Variable output_variable = 1;
    repeated Variable input_variable = 2;
}

// Ledger: Defines the database used by the service, it would be a class diagram and a consensus algorithm.
message Ledger {
    string tag = 1;
}

message Service {
    google.protobuf.FileDescriptorSet syntax = 1;
    Container container = 2;
    Api api = 3;
    Tensor tensor = 4;
    Ledger ledger = 5;
    repeated Multihash depencencies = 6;
}

message ExtendedService {
    Multihash multihash = 1;
    Service service = 2;
}

// The __config__ file is mounted on each service on the filesystem's root.
message Gateway {
    string ip = 1;
    Api api = 2;
}

message Configuration{
    Gateway host_gateway = 1;
    repeated string enviroment_variables = 2;
    repeated Slot slot = 3; // Only some of the specified ports and the protocol submesh for each slot.
}