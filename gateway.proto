syntax = "proto3";
package gateway;

import "celaut.proto";
import "buffer.proto";

message TokenMessage {
    string token = 1;
}

message Instance {
    optional celaut.Any.Metadata instance_meta = 1;
    celaut.Instance instance = 2;
    optional string token = 3;
}

message ServiceWithMeta {
    celaut.Any.Metadata metadata = 1;
    celaut.Service service = 2;
}

// ( celaut.Any.Metadata.HashTag.Hash=H, ServiceWithMeta=S, celaut.Configuration=C; { H v S v H^C v S^C } )
message HashWithConfig { // H^C 
    celaut.Any.Metadata.HashTag.Hash hash = 1;
    celaut.Configuration config = 3;
    optional celaut.Sysresources min_sysreq = 4;  // init system specs.
    optional celaut.Sysresources max_sysreq = 5;  // minimun system specs that the node needs to 've for it sometime.
}
message ServiceWithConfig { // S^C
    ServiceWithMeta service = 2;
    celaut.Configuration config = 3;
    optional celaut.Sysresources min_sysreq = 4;  // init system specs.
    optional celaut.Sysresources max_sysreq = 5;  // minimun system specs that the node needs to 've for it sometime.
}

message ModifyServiceSystemResourcesInput {
    celaut.Sysresources min_sysreq = 1;
    celaut.Sysresources max_sysreq = 2;
}

// GRPC.
service Gateway {
    rpc StartService( stream buffer.Buffer) returns ( stream buffer.Buffer) {} // ( celaut.Any.Metadata.HashTag.Hash=H, celaut.Any=S, celaut.Configuration=C; { H v S v H^C v S^C } ) -> Instance
    rpc StopService(stream buffer.Buffer) returns (stream buffer.Buffer) {} // TokenMessage -> Empty

    rpc ModifyServiceSystemResources(stream buffer.Buffer) returns (stream buffer.Buffer) {} // ModifyServiceSystemResourcesInput -> Empty
}