syntax = "proto3";
import "google/protobuf/descriptor.proto";
package ipss;

//  --------------------
// SPECIFICATION.
//  --------------------
// Hash Table ( IPDL ?)
message Hash {
    string hash = 1;
    repeated string tag = 2;
    // Mesh specification can be applied. <- must be optional
}

// API: Defines how you can interact with the service, the ports where it listens, the communication protocols that it supports, methods and the different errors and responses that it can give.
message ProtocolMesh {
    repeated string tag = 1;
    // Mesh specification can be applied. <- must be optional
}

message Slot {
    int32 port = 1;
    ProtocolMesh transport_protocol = 2;
    google.protobuf.FileDescriptorSet aplication_protocol = 3;
    // Cost function can be applied. <- must be optional
}

// Container: Specifies the container where the service runs, microarchitecture, entry point and filesystem (DAG?), and environment variables.
message Architecture {
    repeated string tag = 1;
    // Architecture specification can be applied. <- must be optional.
}

message Container {
    Architecture architecture = 1;
    repeated Hash filesystem = 2;
    repeated string enviroment_variables = 3;
    string entrypoint = 4;
}

// Tensor: Defines “intelligence” that the service can provide, I think it would be a description of a polynomial (without coefficients and describing the variables).
message Tensor {
    message Variable {
        string id = 1;
        repeated string tag = 2;
        optional google.protobuf.DescriptorProto field = 3;
    }
    repeated Variable output_variable = 1;
    repeated Variable input_variable = 2;
}

// Ledger: Defines the database used by the service, it would be a class diagram and a consensus algorithm.
message Ledger {
    repeated string tag = 1;
    // Ledger specification can be applied. <- must be optional
}

message Service {
    google.protobuf.FileDescriptorSet syntax = 1;
    Container container = 2;
    repeated Slot api = 3;
    Tensor tensor = 4;
    Ledger ledger = 5;
}


//  --------------------
// CONFIGURATION.
//  --------------------
// The __config__ file is mounted on each service on the filesystem's root.
message Configuration{
    message SlotSpec {
        int32 port = 1;
        ProtocolMesh transport_protocol = 2;
    }
    string gateway_ip = 1;
    repeated Slot gateway_slot = 2;
    map<string, string> enviroment_variables = 2;
    repeated SlotSpec slot = 3; // Only some of the specified ports and the protocol submesh for each slot.
}